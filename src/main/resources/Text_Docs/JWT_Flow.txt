1. Add the JWT dependencies:
implementation("io.jsonwebtoken:jjwt-api:0.12.6")
runtimeOnly("io.jsonwebtoken:jjwt-impl:0.12.6")
runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.12.6")

2. Change the session creation policy to STATELESS as JWT is stateless and does not require server-side session management.
   - This will ensure that the application does not create a session for each request, as JWTs are self-contained tokens that carry the necessary information.

3. Remove Security context explicit save as it is unnecessary for stateless applications.
   - The security context will not be saved in the session, as JWTs are used for authentication and authorization.

4. CORS Policy updates:
   - To expose JWT Tokens in the response headers to the client apps in different origins

5. JWT Token Generation:
   - Create filter that generates JWT tokens upon successful login.
   - Should generate only for login successful authentication requests but not for every request. -> shouldNotFilter() method

6. JWT Token Validation:
   - Create filter that validates JWT tokens for protected resources.
   - Should validate the token for every request other than login request -> shouldFilter() method

7. Add the JWT token generation and validation filters to the filter chain in the Spring Security configuration.
   - Ensure that the JWT token generation filter runs after the BasicAuthenticationFilter. -> because only authenticated users should receive a JWT token.
   - Ensure that the JWT token validation filter runs before the BasicAuthenticationFilter. -> because it needs to validate the token before any authentication is done.

8. Build the logic to generate JWT token inside the JWT token generation filter.
   8.1 Use the JJWT library to create a JWT token with the necessary claims (e.g., username, roles, expiration time).
   8.2 Sign the token with a secret key.
   8.3 Steps:
    - Extract the authentication object from the SecurityContext.
    - Create a secret key for signing the JWT token.
    - Set issuer -> To identify the application that generated the token (Client can be aware of the issuer).
    - Set subject -> Name of the token i.e. JWT Token.
    - Set claims -> Add the username and roles to the token.
    - Set issued at -> Current time.
    - Set expiration time -> Token should expire after a certain period
    - sign the token with the secret key.
   8.4 Set the token in the response header with a custom header name (JWT-Authorization).

9. Build the logic to validate JWT token inside the JWT token validation filter.
    9.1 Use the JJWT library to parse and validate the JWT token.
    9.2 Steps:
     - Extract the JWT token from the request header.
     - Validate the token signature using the secret key.
     - Check if the token is expired.
     - If valid, create the authentication object and set it in the SecurityContext.
     - If invalid, throw an exception or return an error response.

10. Refresh Token Logic:
Purpose: To allow users to obtain a new JWT token without re-authenticating, extending the session without requiring the user to log in again.
    - When a user logs in, they receive a JWT token as Authorization header and a refresh token as a cookie which is HttpOnly and Secure.
    - (Setting HttpOnly true means that the cookie cannot be accessed nor modified by JavaScript, enhancing security against XSS attacks.)
    - It is stored in the browser's cookies and is used to obtain a new JWT token when the current one expires.
    - It is validated and, if valid, a new JWT token & refresh token are generated and returned in the response header and cookie resp.
    - When JWT and refresh token are generated in previous step, the old refresh token is invalidated/deleted to prevent reuse.
    - It will be deleted when the user logs out or when the refresh token expiry check is true.

11. XSS vs CSRF:
    - XSS (Cross-Site Scripting) is an attack where an attacker injects malicious scripts into web pages viewed by other users, potentially stealing sensitive information like cookies.
    - CSRF (Cross-Site Request Forgery) is an attack where an attacker tricks a user into performing actions on a web application without their consent, using the user's authenticated session.
    - XSS exploits the trust a user has for a site where as XSRF exploits the trust a site has for a user.
    - XSS - forgery of website content, CSRF - forgery of user actions.

12. Potential Security Risks with JWT and their Solutions:
    12.1 Access Token Theft:
    - When generating the jwt token, add a jti (JWT ID) claim to the token.
    - With this id, map ip and user agent of the client that generated the token and store it in the database/cache.
    - When validating the token, check if the jti matches the stored values in the database/cache.
    - If it does not match, invalidate the token and return an error response.

    12.2 Refresh Token Theft:
    - Store the refresh token in a secure HttpOnly cookie to prevent access by JavaScript.

    12.3 Replay Refresh Token Attacks:
    - Implement Rotating refresh tokens where a new refresh token is issued each time the user requests a new access token.
    - Invalidate the old refresh token immediately after issuing a new one to prevent reuse.

    12.4 CSRF on refresh token endpoint:
    - Implement CSRF protection on the refresh token endpoint by requiring a valid CSRF token in the request header.
    - This ensures that only legitimate requests from the same origin can refresh the JWT token.
    - confusion: csrf token: httponly false; refresh token: httponly true

    12.5 Token Expiration:
    - Set a reasonable expiration time for both access and refresh tokens
    - Show a user-friendly message when the token expires and prompt the user to log in again.

    12.6 User Account Locked or Disabled:
    - Implement checks in the JWT validation filter to ensure that the user account is not locked or disabled before allowing access to protected resources.
    - If the account is locked or disabled, return an appropriate error response.

    12.7 Concurrent usage of same refresh token:
    - Implement refresh token usage tracking (IP/timestamp/user agent) to prevent concurrent usage of the same refresh token.
    - Block old tokens on new token generation to prevent reuse.

    12.8 Token Revocation:
    - Implement a token revocation mechanism to allow users to log out and invalidate their tokens.
    - This can be done by maintaining a blacklist of revoked tokens or by using a database/cache to track active tokens.


