1. When a user interacts(public endpoint) with a web application or logs in, the server generates a unique CSRF token
and sends it to the client.
    1.1 Csrf token is generated by the CsrfTokenRepository which is implemented by following classes:
        1.1.1 CookieCsrfTokenRepository - preferred for stateless applications as it stores the token in a cookie.
        1.1.2 HttpSessionCsrfTokenRepository -> not recommended because it stores the token in the session which is not secure as it can be accessed by the user.
    1.2 Token generation is LAZILY done by the CsrfTokenRepository, meaning it is generated only when needed to enhance performance.
2. The client stores the CSRF token, typically in a cookie or as a hidden field in forms.
3. CookieCsrfTokenRepository
    3.1 will persist the CSRF token in the cookie named XSRF-TOKEN until the browser is closed.
    3.2 set withHttpOnly(false) to allow JavaScript access -> Ensures JS reads the token and includes it in request header/body as X-XSRF-TOKEN.
4. To read the CSRF manually by our Spring app, we can create a custom filter that reads the CSRF token from the cookie and adds it to the request header.
    4.1 CustomFilter extends OncePerRequestFilter -> This filter will get executed once per request.
    4.2 Fetch the token from the httpserveletrequest and pass the request to the next filter in the chain.
5. Add the custom filter to the filter chain in the Spring Security configuration to run after basic authentication filter
    5.1 This ensures that the CSRF token is read and added to the request header before it reaches the controller.
6. To tell the CsrfFilter from where to read the csrf token in the request, we make use of CsrfTokenRequestAttributeHandler
    6.1 This handler will read the CSRF token from the request header and set it in the request attribute with _csrf attribute name.
    6.2 Now the filter validates the CSRF token against the one stored in the cookie.
7. Spring Security will not store the jsessionid by default for stateless applications.
    7.1 Manage the session using the session creation policy in the security configuration. and set it as ALWAYS -> This will ensure that the session is created for every request.
    7.2 This is important because the CSRF token is stored in the session and needs to be available for validation.
    7.3 Also to tell the spring that I am not manually storing the session  rather you have to store it, we need to set the requireExplicitSave as false
